{
  "name": "increase-size-pie-chart",
  "type": "registry:ui",
  "registryDependencies": [
    "chart"
  ],
  "dependencies": [
    "recharts"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "increase-size-pie-chart.tsx",
      "content": "\"use client\";\n\nimport { LabelList, Pie, PieChart, Cell } from \"recharts\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/components/ui/chart\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingDown } from \"lucide-react\";\n\nconst chartData = [\n  { browser: \"chrome\", visitors: 275, fill: \"var(--color-chrome)\" },\n  { browser: \"safari\", visitors: 200, fill: \"var(--color-safari)\" },\n  { browser: \"firefox\", visitors: 187, fill: \"var(--color-firefox)\" },\n  { browser: \"edge\", visitors: 173, fill: \"var(--color-edge)\" },\n  { browser: \"other\", visitors: 90, fill: \"var(--color-other)\" },\n];\n\n// Sort the data by visitors in ascending order (smallest to largest) it will make graph look better\nconst sortedChartData = [...chartData].sort((a, b) => a.visitors - b.visitors);\n\n// Configure the size increase between each pie ring\nconst BASE_RADIUS = 50; // Starting radius for the smallest pie\nconst SIZE_INCREMENT = 10; // How much to increase radius for each subsequent pie\n\nconst chartConfig = {\n  visitors: {\n    label: \"Visitors\",\n  },\n  chrome: {\n    label: \"Chrome\",\n    color: \"var(--chart-1)\",\n  },\n  safari: {\n    label: \"Safari\",\n    color: \"var(--chart-2)\",\n  },\n  firefox: {\n    label: \"Firefox\",\n    color: \"var(--chart-3)\",\n  },\n  edge: {\n    label: \"Edge\",\n    color: \"var(--chart-4)\",\n  },\n  other: {\n    label: \"Other\",\n    color: \"var(--chart-5)\",\n  },\n} satisfies ChartConfig;\n\nexport function IncreaseSizePieChart() {\n  return (\n    <Card className=\"flex flex-col\">\n      <CardHeader className=\"items-center pb-0\">\n        <CardTitle>\n          Sized Pie Chart\n          <Badge\n            variant=\"outline\"\n            className=\"text-red-500 bg-red-500/10 border-none ml-2\"\n          >\n            <TrendingDown className=\"h-4 w-4\" />\n            <span>5.2%</span>\n          </Badge>\n        </CardTitle>\n        <CardDescription>January - June 2024</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-1 pb-0\">\n        <ChartContainer\n          config={chartConfig}\n          className=\"[&_.recharts-text]:fill-background mx-auto aspect-square max-h-[250px]\"\n        >\n          <PieChart>\n            <ChartTooltip\n              content={<ChartTooltipContent nameKey=\"visitors\" hideLabel />}\n            />\n            {sortedChartData.map((entry, index) => (\n              <Pie\n                key={`pie-${index}`}\n                data={[entry]}\n                innerRadius={30}\n                outerRadius={BASE_RADIUS + index * SIZE_INCREMENT}\n                dataKey=\"visitors\"\n                cornerRadius={4}\n                startAngle={\n                  // Calculate the percentage of total visitors up to current index\n                  (sortedChartData\n                    .slice(0, index)\n                    .reduce((sum, d) => sum + d.visitors, 0) /\n                    sortedChartData.reduce((sum, d) => sum + d.visitors, 0)) *\n                  360\n                }\n                endAngle={\n                  // Calculate the percentage of total visitors up to and including current index\n                  (sortedChartData\n                    .slice(0, index + 1)\n                    .reduce((sum, d) => sum + d.visitors, 0) /\n                    sortedChartData.reduce((sum, d) => sum + d.visitors, 0)) *\n                  360\n                }\n              >\n                <Cell fill={entry.fill} />\n                <LabelList\n                  dataKey=\"visitors\"\n                  stroke=\"none\"\n                  fontSize={12}\n                  fontWeight={500}\n                  fill=\"currentColor\"\n                  formatter={(value: number) => value.toString()}\n                />\n              </Pie>\n            ))}\n          </PieChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}