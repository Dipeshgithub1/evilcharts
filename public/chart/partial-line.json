{
  "name": "partial-line",
  "type": "registry:ui",
  "registryDependencies": [
    "chart"
  ],
  "dependencies": [
    "recharts"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "partial-line.tsx",
      "content": "\"use client\";\n\nimport { CartesianGrid, Line, LineChart, XAxis, Customized } from \"recharts\";\nimport { useCallback, useState } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/components/ui/chart\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp } from \"lucide-react\";\n\nconst chartData = [\n  { month: \"January\", desktop: 345, mobile: 210 },\n  { month: \"February\", desktop: 524, mobile: 380 },\n  { month: \"March\", desktop: 417, mobile: 310 },\n  { month: \"April\", desktop: 321, mobile: 480 },\n  { month: \"May\", desktop: 412, mobile: 530 },\n  { month: \"June\", desktop: 598, mobile: 450 },\n  { month: \"July\", desktop: 412, mobile: 290 },\n  { month: \"August\", desktop: 643, mobile: 460 },\n  { month: \"September\", desktop: 489, mobile: 390 },\n  { month: \"October\", desktop: 576, mobile: 470 },\n  { month: \"November\", desktop: 787, mobile: 620 },\n  { month: \"December\", desktop: 298, mobile: 250 },\n];\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"var(--secondary-foreground)\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"var(--chart-2)\",\n  },\n} satisfies ChartConfig;\n\nexport function PartialLineChart() {\n  const [DasharrayCalculator, lineDasharrays] = useDynamicDasharray({\n    splitIndex: chartData.length - 2,\n  });\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>\n          Partial Line Chart\n          <Badge\n            variant=\"outline\"\n            className=\"text-green-500 bg-green-500/10 border-none ml-2\"\n          >\n            <TrendingUp className=\"h-4 w-4\" />\n            <span>5.2%</span>\n          </Badge>\n        </CardTitle>\n        <CardDescription>January - June 2025</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer className=\"h-54 w-full\" config={chartConfig}>\n          <LineChart\n            accessibilityLayer\n            data={chartData}\n            margin={{\n              left: 12,\n              right: 12,\n            }}\n          >\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n            <ChartTooltip\n              cursor={false}\n              content={<ChartTooltipContent hideLabel />}\n            />\n            {Object.entries(chartConfig).map(([key, value]) => (\n              <Line\n                key={key}\n                dataKey={key}\n                type=\"linear\"\n                stroke={value.color}\n                dot={{\n                  r: 2.5,\n                  fill: value.color,\n                }}\n                strokeDasharray={\n                  lineDasharrays.find((line) => line.name === key)\n                    ?.strokeDasharray || \"0 0\"\n                }\n              />\n            ))}\n            <Customized component={DasharrayCalculator} />\n          </LineChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface ChartDataPoint {\n  x?: number;\n  y?: number;\n  value?: number | string;\n  payload?: Record<string, unknown>;\n}\n\ninterface ChartLineData {\n  item: {\n    props: {\n      dataKey: string;\n    };\n  };\n  props: {\n    points: ChartDataPoint[];\n  };\n}\n\ninterface CustomizedChartProps {\n  formattedGraphicalItems?: ChartLineData[];\n}\n\ninterface LineConfig {\n  name: string;\n  splitIndex?: number;\n  dashPattern?: number[];\n  curveAdjustment?: number;\n}\n\ninterface UseDynamicDasharrayProps {\n  lineConfigs?: LineConfig[];\n  splitIndex?: number;\n  defaultDashPattern?: number[];\n  curveAdjustment?: number;\n}\n\ntype LineDasharray = {\n  name: string;\n  strokeDasharray: string;\n}[];\n\nexport function useDynamicDasharray({\n  lineConfigs = [],\n  splitIndex = -2,\n  defaultDashPattern: dashPattern = [5, 3],\n  curveAdjustment = 1,\n}: UseDynamicDasharrayProps): [\n  (props: CustomizedChartProps) => null,\n  LineDasharray\n] {\n  const [lineDasharrays, setLineDasharrays] = useState<LineDasharray>([]);\n\n  const DasharrayCalculator = useCallback(\n    (props: CustomizedChartProps): null => {\n      const chartLines = props?.formattedGraphicalItems;\n      const newLineDasharrays: LineDasharray = [];\n\n      const calculatePathLength = (points: ChartDataPoint[]) => {\n        return (\n          points?.reduce((acc, point, index) => {\n            if (index === 0) return acc;\n\n            const prevPoint = points[index - 1];\n\n            const dx = (point.x || 0) - (prevPoint.x || 0);\n            const dy = (point.y || 0) - (prevPoint.y || 0);\n\n            acc += Math.sqrt(dx * dx + dy * dy);\n            return acc;\n          }, 0) || 0\n        );\n      };\n\n      chartLines?.forEach((line) => {\n        const points = line?.props?.points;\n        const totalLength = calculatePathLength(points || []);\n\n        const lineName = line?.item?.props?.dataKey;\n        const lineConfig = lineConfigs?.find(\n          (config) => config?.name === lineName\n        );\n        const lineSplitIndex = lineConfig?.splitIndex ?? splitIndex;\n        const dashedSegment = points?.slice(lineSplitIndex);\n        const dashedLength = calculatePathLength(dashedSegment || []);\n\n        if (!totalLength || !dashedLength) return;\n\n        const solidLength = totalLength - dashedLength;\n        const curveCorrectionFactor =\n          lineConfig?.curveAdjustment ?? curveAdjustment;\n        const adjustment = (solidLength * curveCorrectionFactor) / 100;\n        const solidDasharrayPart = solidLength + adjustment;\n\n        const targetDashPattern = lineConfig?.dashPattern || dashPattern;\n        const patternSegmentLength =\n          (targetDashPattern?.[0] || 0) + (targetDashPattern?.[1] || 0) || 1;\n        const repetitions = Math.ceil(dashedLength / patternSegmentLength);\n        const dashedPatternSegments = Array.from({ length: repetitions }, () =>\n          targetDashPattern.join(\" \")\n        );\n\n        const finalDasharray = `${solidDasharrayPart} ${dashedPatternSegments.join(\n          \" \"\n        )}`;\n        newLineDasharrays.push({\n          name: lineName!,\n          strokeDasharray: finalDasharray,\n        });\n      });\n\n      if (\n        JSON.stringify(newLineDasharrays) !== JSON.stringify(lineDasharrays)\n      ) {\n        setTimeout(() => setLineDasharrays(newLineDasharrays), 0);\n      }\n\n      return null;\n    },\n    [splitIndex, curveAdjustment, lineConfigs, dashPattern, lineDasharrays]\n  );\n\n  return [DasharrayCalculator, lineDasharrays];\n}\n",
      "type": "registry:ui"
    }
  ]
}