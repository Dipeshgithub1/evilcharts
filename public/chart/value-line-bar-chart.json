{
  "name": "value-line-bar-chart",
  "type": "registry:ui",
  "registryDependencies": [
    "chart"
  ],
  "dependencies": [
    "recharts",
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "value-line-bar-chart.tsx",
      "content": "\"use client\";\n\nimport { TrendingUp } from \"lucide-react\";\nimport { Bar, BarChart, Cell, XAxis, ReferenceLine } from \"recharts\";\nimport React from \"react\";\nimport { AnimatePresence } from \"motion/react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { ChartConfig, ChartContainer } from \"@/components/ui/chart\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { JetBrains_Mono } from \"next/font/google\";\nimport { useMotionValueEvent, useSpring } from \"framer-motion\";\n\nconst jetBrainsMono = JetBrains_Mono({\n  subsets: [\"latin\"],\n  weight: [\"400\", \"500\", \"600\", \"700\"],\n});\n\nconst CHART_MARGIN = 35;\n\nconst chartData = [\n  { month: \"January\", desktop: 342 },\n  { month: \"February\", desktop: 676 },\n  { month: \"March\", desktop: 512 },\n  { month: \"April\", desktop: 629 },\n  { month: \"May\", desktop: 458 },\n  { month: \"June\", desktop: 781 },\n  { month: \"July\", desktop: 394 },\n  { month: \"August\", desktop: 924 },\n  { month: \"September\", desktop: 647 },\n  { month: \"October\", desktop: 532 },\n  { month: \"November\", desktop: 803 },\n  { month: \"December\", desktop: 271 },\n  { month: \"January\", desktop: 342 },\n  { month: \"February\", desktop: 876 },\n  { month: \"March\", desktop: 512 },\n  { month: \"April\", desktop: 629 },\n];\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"var(--secondary-foreground)\",\n  },\n} satisfies ChartConfig;\n\nexport function ValueLineBarChart() {\n  const [activeIndex, setActiveIndex] = React.useState<number | undefined>(\n    undefined\n  );\n\n  const maxValueIndex = React.useMemo(() => {\n    // if user is moving mouse over bar then set value to the bar value\n    if (activeIndex !== undefined) {\n      return { index: activeIndex, value: chartData[activeIndex].desktop };\n    }\n    // if no active index then set value to max value\n    return chartData.reduce(\n      (max, data, index) => {\n        return data.desktop > max.value ? { index, value: data.desktop } : max;\n      },\n      { index: 0, value: 0 }\n    );\n  }, [activeIndex]);\n\n  const maxValueIndexSpring = useSpring(maxValueIndex.value, {\n    stiffness: 100,\n    damping: 20,\n  });\n\n  const [springyValue, setSpringyValue] = React.useState(maxValueIndex.value);\n\n  useMotionValueEvent(maxValueIndexSpring, \"change\", (latest) => {\n    setSpringyValue(Number(latest.toFixed(0)));\n  });\n\n  React.useEffect(() => {\n    maxValueIndexSpring.set(maxValueIndex.value);\n  }, [maxValueIndex.value, maxValueIndexSpring]);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <span\n            className={cn(jetBrainsMono.className, \"text-2xl tracking-tighter\")}\n          >\n            ${maxValueIndex.value}\n          </span>\n          <Badge variant=\"secondary\">\n            <TrendingUp className=\"h-4 w-4\" />\n            <span>5.2%</span>\n          </Badge>\n        </CardTitle>\n        <CardDescription>vs. last quarter</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <AnimatePresence mode=\"wait\">\n          <ChartContainer config={chartConfig}>\n            <BarChart\n              accessibilityLayer\n              data={chartData}\n              onMouseLeave={() => setActiveIndex(undefined)}\n              margin={{\n                left: CHART_MARGIN,\n              }}\n            >\n              <XAxis\n                dataKey=\"month\"\n                tickLine={false}\n                tickMargin={10}\n                axisLine={false}\n                tickFormatter={(value) => value.slice(0, 3)}\n              />\n              <Bar dataKey=\"desktop\" fill=\"var(--color-desktop)\" radius={4}>\n                {chartData.map((_, index) => (\n                  <Cell\n                    className=\"duration-200\"\n                    opacity={index === maxValueIndex.index ? 1 : 0.2}\n                    key={index}\n                    onMouseEnter={() => setActiveIndex(index)}\n                  />\n                ))}\n              </Bar>\n              <ReferenceLine\n                opacity={0.4}\n                y={springyValue}\n                stroke=\"var(--secondary-foreground)\"\n                strokeWidth={1}\n                strokeDasharray=\"3 3\"\n                label={<CustomReferenceLabel value={maxValueIndex.value} />}\n              />\n            </BarChart>\n          </ChartContainer>\n        </AnimatePresence>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface CustomReferenceLabelProps {\n  viewBox?: {\n    x?: number;\n    y?: number;\n  };\n  value: number;\n}\n\nconst CustomReferenceLabel: React.FC<CustomReferenceLabelProps> = (props) => {\n  const { viewBox, value } = props;\n  const x = viewBox?.x ?? 0;\n  const y = viewBox?.y ?? 0;\n\n  // we need to change width based on value length\n  const width = React.useMemo(() => {\n    const characterWidth = 8; // Average width of a character in pixels\n    const padding = 10;\n    return value.toString().length * characterWidth + padding;\n  }, [value]);\n\n  return (\n    <>\n      <rect\n        x={x - CHART_MARGIN}\n        y={y - 9}\n        width={width}\n        height={18}\n        fill=\"var(--secondary-foreground)\"\n        rx={4}\n      />\n      <text\n        fontWeight={600}\n        x={x - CHART_MARGIN + 6}\n        y={y + 4}\n        fill=\"var(--primary-foreground)\"\n      >\n        {value}\n      </text>\n    </>\n  );\n};\n",
      "type": "registry:ui"
    }
  ]
}