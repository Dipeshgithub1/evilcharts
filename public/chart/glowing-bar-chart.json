{
  "name": "glowing-bar-chart",
  "type": "registry:ui",
  "registryDependencies": [
    "chart"
  ],
  "dependencies": [
    "recharts"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "glowing-bar-chart.tsx",
      "content": "\"use client\";\n\nimport { TrendingUp } from \"lucide-react\";\nimport { Bar, BarChart, XAxis } from \"recharts\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/components/ui/chart\";\nimport { Badge } from \"@/components/ui/badge\";\nimport React from \"react\";\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nconst chartData = [\n  { month: \"January\", desktop: 342, mobile: 245, tablet: 123 },\n  { month: \"February\", desktop: 876, mobile: 654, tablet: 234 },\n  { month: \"March\", desktop: 512, mobile: 387, tablet: 156 },\n  { month: \"April\", desktop: 629, mobile: 521, tablet: 267 },\n  { month: \"May\", desktop: 458, mobile: 412, tablet: 213 },\n  { month: \"June\", desktop: 781, mobile: 598, tablet: 321 },\n  { month: \"July\", desktop: 394, mobile: 312, tablet: 145 },\n  { month: \"August\", desktop: 925, mobile: 743, tablet: 150 },\n  { month: \"September\", desktop: 647, mobile: 489, tablet: 212 },\n  { month: \"October\", desktop: 532, mobile: 476, tablet: 187 },\n  { month: \"November\", desktop: 803, mobile: 687, tablet: 298 },\n  { month: \"December\", desktop: 271, mobile: 198, tablet: 123 },\n];\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"var(--chart-1)\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"var(--chart-2)\",\n  },\n  tablet: {\n    label: \"Tablet\",\n    color: \"var(--chart-3)\",\n  },\n} satisfies ChartConfig;\n\ntype ActiveProperty = keyof typeof chartConfig | \"all\";\n\nexport function GlowingBarChart() {\n  const [activeProperty, setActiveProperty] =\n    React.useState<ActiveProperty>(\"all\");\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex flex-row justify-between\">\n          <CardTitle>\n            Bar Chart\n            <Badge\n              variant=\"outline\"\n              className=\"text-green-500 bg-green-500/10 border-none ml-2\"\n            >\n              <TrendingUp className=\"h-4 w-4\" />\n              <span>5.2%</span>\n            </Badge>\n          </CardTitle>\n          <Select\n            value={activeProperty}\n            onValueChange={(value: ActiveProperty) => {\n              setActiveProperty(value);\n            }}\n          >\n            <SelectTrigger className=\"text-xs !h-6 !px-1.5\">\n              <SelectValue placeholder=\"Select a property\" />\n            </SelectTrigger>\n            <SelectContent align=\"end\">\n              <SelectGroup>\n                <SelectLabel>Properties</SelectLabel>\n                <SelectItem className=\"text-xs\" value=\"all\">\n                  All\n                </SelectItem>\n                <SelectItem className=\"text-xs\" value=\"desktop\">\n                  Desktop\n                </SelectItem>\n                <SelectItem className=\"text-xs\" value=\"mobile\">\n                  Mobile\n                </SelectItem>\n                <SelectItem className=\"text-xs\" value=\"tablet\">\n                  Tablet\n                </SelectItem>\n              </SelectGroup>\n            </SelectContent>\n          </Select>\n        </div>\n        <CardDescription>January - June 2025</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ChartContainer config={chartConfig}>\n          <BarChart accessibilityLayer data={chartData}>\n            <XAxis\n              dataKey=\"month\"\n              tickLine={false}\n              tickMargin={10}\n              axisLine={false}\n              tickFormatter={(value) => value.slice(0, 3)}\n            />\n\n            <ChartTooltip\n              cursor={false}\n              content={<ChartTooltipContent hideLabel />}\n            />\n            <Bar\n              stackId=\"a\"\n              barSize={8}\n              className=\"dark:text-[#1A1A1C] text-[#E4E4E7]\"\n              dataKey=\"mobile\"\n              fill=\"var(--color-mobile)\"\n              radius={4}\n              shape={<CustomGradientBar activeProperty={activeProperty} />}\n              background={{ fill: \"currentColor\", radius: 4 }} // Only Top Bar will have background else it will give render errors\n              overflow=\"visible\"\n            />\n            <Bar\n              stackId=\"a\"\n              barSize={8}\n              shape={<CustomGradientBar activeProperty={activeProperty} />}\n              dataKey=\"tablet\"\n              fill=\"var(--color-tablet)\"\n              radius={4}\n              overflow=\"visible\"\n            />\n            <Bar\n              stackId=\"a\"\n              barSize={8}\n              shape={<CustomGradientBar activeProperty={activeProperty} />}\n              dataKey=\"desktop\"\n              fill=\"var(--color-desktop)\"\n              radius={4}\n              overflow=\"visible\"\n            />\n          </BarChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  );\n}\n\nconst CustomGradientBar = (\n  props: React.SVGProps<SVGRectElement> & {\n    dataKey?: string;\n    activeProperty?: ActiveProperty | null;\n    glowOpacity?: number;\n  }\n) => {\n  const { fill, x, y, width, height, dataKey, activeProperty, radius } = props;\n  console.log(\"props\", props);\n\n  const isActive = activeProperty === \"all\" ? true : activeProperty === dataKey;\n\n  return (\n    <>\n      <rect\n        x={x}\n        y={y}\n        rx={radius}\n        width={width}\n        height={height}\n        stroke=\"none\"\n        fill={fill}\n        opacity={isActive ? 1 : 0.1}\n        filter={\n          isActive && activeProperty !== \"all\"\n            ? `url(#glow-chart-${dataKey})`\n            : undefined\n        }\n      />\n      <defs>\n        <filter\n          id={`glow-chart-${dataKey}`}\n          x=\"-200%\"\n          y=\"-200%\"\n          width=\"600%\"\n          height=\"600%\"\n        >\n          <feGaussianBlur stdDeviation=\"10\" result=\"blur\" />\n          <feComposite in=\"SourceGraphic\" in2=\"blur\" operator=\"over\" />\n        </filter>\n      </defs>\n    </>\n  );\n};\n",
      "type": "registry:ui"
    }
  ]
}