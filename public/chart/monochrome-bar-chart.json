{
  "name": "monochrome-bar-chart",
  "type": "registry:ui",
  "registryDependencies": [
    "chart"
  ],
  "dependencies": [
    "recharts",
    "motion"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "monochrome-bar-chart.tsx",
      "content": "\"use client\";\n\nimport { TrendingUp } from \"lucide-react\";\nimport { Bar, BarChart, XAxis } from \"recharts\";\nimport React, { SVGProps } from \"react\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { ChartConfig, ChartContainer } from \"@/components/ui/chart\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { JetBrains_Mono } from \"next/font/google\";\n\nconst jetBrainsMono = JetBrains_Mono({\n  subsets: [\"latin\"],\n  weight: [\"400\", \"500\", \"600\", \"700\"],\n});\n\nconst chartData = [\n  { month: \"January\", desktop: 342 },\n  { month: \"February\", desktop: 876 },\n  { month: \"March\", desktop: 512 },\n  { month: \"April\", desktop: 629 },\n  { month: \"May\", desktop: 458 },\n  { month: \"June\", desktop: 781 },\n  { month: \"July\", desktop: 394 },\n  { month: \"August\", desktop: 925 },\n  { month: \"September\", desktop: 647 },\n  { month: \"October\", desktop: 532 },\n  { month: \"November\", desktop: 803 },\n  { month: \"December\", desktop: 271 },\n  { month: \"January\", desktop: 342 },\n  { month: \"February\", desktop: 876 },\n  { month: \"March\", desktop: 512 },\n  { month: \"April\", desktop: 629 },\n];\n\nconst chartConfig = {\n  desktop: {\n    label: \"Desktop\",\n    color: \"var(--secondary-foreground)\",\n  },\n} satisfies ChartConfig;\n\nexport function MonochromeBarChart() {\n  const [activeIndex, setActiveIndex] = React.useState<number | undefined>(\n    undefined\n  );\n\n  const activeData = React.useMemo(() => {\n    if (activeIndex === undefined) return null;\n    return chartData[activeIndex];\n  }, [activeIndex]);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <span\n            className={cn(jetBrainsMono.className, \"text-2xl tracking-tighter\")}\n          >\n            ${activeData ? activeData.desktop : \"123\"}\n          </span>\n          <Badge variant=\"secondary\">\n            <TrendingUp className=\"h-4 w-4\" />\n            <span>5.2%</span>\n          </Badge>\n        </CardTitle>\n        <CardDescription>vs. last quarter</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <AnimatePresence mode=\"wait\">\n          <ChartContainer config={chartConfig}>\n            <BarChart\n              accessibilityLayer\n              data={chartData}\n              onMouseLeave={() => setActiveIndex(undefined)}\n            >\n              <XAxis\n                dataKey=\"month\"\n                tickLine={false}\n                tickMargin={10}\n                axisLine={false}\n                tickFormatter={(value) => value.slice(0, 3)}\n              />\n              <Bar\n                dataKey=\"desktop\"\n                fill=\"var(--secondary-foreground)\"\n                shape={\n                  <CustomBar\n                    setActiveIndex={setActiveIndex}\n                    activeIndex={activeIndex}\n                  />\n                }\n              ></Bar>\n            </BarChart>\n          </ChartContainer>\n        </AnimatePresence>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface CustomBarProps extends SVGProps<SVGSVGElement> {\n  setActiveIndex: (index?: number) => void;\n  index?: number;\n  activeIndex?: number;\n  value?: string;\n}\n\nconst CustomBar = (props: CustomBarProps) => {\n  const { fill, x, y, width, height, index, activeIndex, value } = props;\n\n  // Custom variables\n  const xPos = Number(x || 0);\n  const realWidth = Number(width || 0);\n  const isActive = index === activeIndex;\n  const collapsedWidth = 2;\n  // centered bar x-position\n  const barX = isActive ? xPos : xPos + (realWidth - collapsedWidth) / 2;\n  // centered text x-position\n  const textX = xPos + realWidth / 2;\n  // Custom bar shape\n  return (\n    <g onMouseEnter={() => props.setActiveIndex(index)}>\n      {/* rendering the bar with custom postion and animated width */}\n      <motion.rect\n        style={{\n          willChange: \"transform, width\", // helps with performance\n        }}\n        y={y}\n        initial={{ width: collapsedWidth, x: barX }}\n        animate={{ width: isActive ? realWidth : collapsedWidth, x: barX }}\n        transition={{\n          duration: activeIndex === index ? 0.5 : 1,\n          type: \"spring\",\n        }}\n        height={height}\n        fill={fill}\n      />\n      {/* Render value text on top of bar */}\n      {isActive && (\n        <motion.text\n          style={{\n            willChange: \"transform, opacity\", // helps with performance\n          }}\n          className={jetBrainsMono.className}\n          key={index}\n          initial={{ opacity: 0, y: -10, filter: \"blur(3px)\" }}\n          animate={{ opacity: 1, y: 0, filter: \"blur(0px)\" }}\n          exit={{ opacity: 0, y: -10, filter: \"blur(3px)\" }}\n          transition={{ duration: 0.1 }}\n          x={textX}\n          y={Number(y) - 5}\n          textAnchor=\"middle\"\n          fill={fill}\n        >\n          {value}\n        </motion.text>\n      )}\n    </g>\n  );\n};\n",
      "type": "registry:ui"
    }
  ]
}